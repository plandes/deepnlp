## resources/download model
#
[glove_zip_resource]
class_name = zensols.install.Resource
url = https://nlp.stanford.edu/data/wordvecs/glove.6B.zip
name = None
check_path = glove.6B.50d.txt
rename = False
# if deleted, it will re-download for each vector size when compiling binary
# weights
clean_up = False

[glove_installer]
class_name = zensols.install.Installer
package_resource = zensols.deepnlp
resources = instance: list: glove_zip_resource

# the glove 50
[glove_50_zip_resource]
class_name = zensols.install.Resource
url = https://github.com/uclnlp/inferbeddings/raw/refs/heads/master/data/glove/glove.6B.50d.txt.gz
name = glove.6B.50d.txt
rename = True
clean_up = True

[glove_50_installer]
class_name = zensols.install.Installer
package_resource = ${glove_installer:package_resource}
resources = instance: list: glove_50_zip_resource


## embedding
#
# glove embeddding model (not layer)
[glove_50_embedding]
class_name = zensols.deepnlp.embed.GloveWordEmbedModel
installer = instance: glove_50_installer
resource = instance: glove_50_zip_resource
desc = 6B
dimension = 50
lowercase = True

# a vectorizer that turns tokens (TokensContainer) in to indexes given to the
# embedding layer
[glove_50_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.WordVectorEmbeddingFeatureVectorizer
# the feature id is used to connect instance data with the vectorizer used to
# generate the feature at run time
feature_id = wvglove50
# encode at the (feature) document level
fold_method = concat_tokens
# the word embedding model
embed_model = instance: glove_50_embedding
# do not serialize (pickle) the decoded output to do the work up front
encode_transformed = ${deepnlp_default:glove_encode_transformed}

# a torch.nn.Module implementation that uses the an embedding model
[glove_50_embedding_layer]
class_name = zensols.deepnlp.layer.WordVectorEmbeddingLayer
embed_model = instance: glove_50_embedding
feature_vectorizer_manager = instance: language_vectorizer_manager
# freeze the embedding to train faster
trainable = ${deepnlp_default:glove_trainable}


## glove 300 dim
[glove_300_embedding]
class_name = zensols.deepnlp.embed.GloveWordEmbedModel
installer = instance: glove_installer
resource = instance: glove_zip_resource
desc = 6B
dimension = 300
lowercase = True

[glove_300_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.WordVectorEmbeddingFeatureVectorizer
feature_id = wvglove300
# encode at the (feature) document level
fold_method = concat_tokens
# the word embedding model
embed_model = instance: glove_300_embedding
# do not serialize (pickle) the decoded output to do the work up front
encode_transformed = ${deepnlp_default:glove_encode_transformed}

[glove_300_embedding_layer]
class_name = zensols.deepnlp.layer.WordVectorEmbeddingLayer
embed_model = instance: glove_300_embedding
feature_vectorizer_manager = instance: language_vectorizer_manager
# freeze the embedding to train faster
trainable = ${deepnlp_default:glove_trainable}
