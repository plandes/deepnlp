## Classification labels

# vectorize the labels from text to PyTorch tensors
[classify_label_vectorizer]
class_name = zensols.deeplearn.vectorize.NominalEncodedEncodableFeatureVectorizer
#--config note: uncomment, but be careful not to inclue a ``list:``
#categories = y, n
feature_id = lblabel

# the vectorizer for labels is not language specific and lives in the
# zensols.deeplearn.vectorize package, so it needs it's own instance
[classify_label_vectorizer_manager]
class_name = zensols.deeplearn.vectorize.FeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = list: classify_label_vectorizer


## Prediction mapper

# create data points from the client
[classify_feature_prediction_mapper]
class_name = zensols.deepnlp.classify.ClassificationPredictionMapper
vec_manager = instance: language_feature_manager
label_feature_id = classify_label_vectorizer_manager.lblabel


## Batch
[batch_dir_stash]
# feature grouping: when at least one in a group is needed, all of the features
# in that group are loaded
groups = eval: (
       # there will be N (batch_stash:batch_size) batch labels in one file in a
       # directory of just label files
       set('label'.split()),
       # because we might want to switch between embeddings, separate them
       set('glove_50_embedding'.split()),
       set('glove_300_embedding'.split()),
       set('enums stats counts dependencies'.split()),
       set('transformer_embedding'.split()))

[batch_stash]
# the class that contains the feature data, one for each data instance
data_point_type = eval({'import': ['zensols.deepnlp.classify']}): zensols.deepnlp.classify.LabeledFeatureDocumentDataPoint
# the class taht contains the batch data, which will have N instances of
# `data_point_type` where N is the `batch_size`
batch_type = eval({'import': ['zensols.deepnlp.classify']}): zensols.deepnlp.classify.LabeledBatch
