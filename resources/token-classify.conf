# label vectorizers
[token_classify_label_1_vectorizer]
class_name = zensols.deeplearn.vectorize.NominalEncodedEncodableFeatureVectorizer
feature_id = tclabel1
categories = ${deepnlp_default:labels}

[token_classify_label_vectorizer]
class_name = zensols.deeplearn.vectorize.AggregateEncodableFeatureVectorizer
feature_id = tclabel
delegate_feature_id = tclabel1

[token_classify_mask_vectorizer]
class_name = zensols.deeplearn.vectorize.MaskFeatureVectorizer
feature_id = tcmask


# transformer label vectorizer
[token_classify_label_trans_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerNominalFeatureVectorizer
feature_id = tclabeltrans
encode_transformed = False
delegate_feature_id = tclabel1
embed_model = instance: transformer_trainable_embedding
# serialize (pickle) the decoded output to do the work up front
fold_method = concat_tokens
label_all_tokens = True


# mask
[token_classify_mask_trans_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerMaskFeatureVectorizer
feature_id = tcmasktrans
encode_transformed = False
embed_model = instance: transformer_trainable_embedding
manager = instance: token_classify_label_vectorizer_manager
fold_method = concat_tokens


# vectorizer manager
[token_classify_label_vectorizer_manager]
class_name = zensols.deeplearn.vectorize.FeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = list:
    token_classify_label_1_vectorizer,
    token_classify_label_vectorizer,
    token_classify_mask_vectorizer
