#@meta {desc: 'cross-fold validation configuration', date: '2024-10-25'}
#@meta {doc: 'designed to be configured after feature.conf'}


## Feature
#
# create stratified splits across labels with the same distribution across each
# data set split
[cross_fold_split_key_container]
class_name = zensols.dataset.StratifiedCrossFoldSplitKeyContainer
# the stash to stratify
stash = instance: feature_factory_stash
# number of folds; number of iterations are command line options since each
# randomly shuffles the batch (see ModelExecutor.cross_validate)
n_folds = 5
# per dataset file name with newline separated keys
pattern = {name}.txt
key_path = path: ${deepnlp_default:corpus_dir}/cross-fold-dataset-row-ids
split_labels_path = path: ${default:data_dir}/feature/cross-fold-split-keys.dat
# the attribute on each data point to create the stratas
partition_attr = label
# show per strata statistics (takes longer on `write`)
stratified_write = False

# a stash that splits along dataset type (i.e. train, validation, test)
[cross_fold_feature_stash]
class_name = zensols.dataset.DatasetSplitStash
delegate = instance: feature_factory_stash
split_container = instance: cross_fold_split_key_container


## Batch
#
[cross_fold_batch_dir_stash]
class_name = ${batch_dir_stash:class_name}
path = path: ${deeplearn_default:batch_dir}/cross-fold/${deeplearn_default:batch_size}-vector
groups = ${batch_dir_stash:groups}

[cross_fold_batch_stash]
class_name = ${batch_stash:class_name}
delegate = instance: cross_fold_batch_dir_stash
split_stash_container = instance: cross_fold_feature_stash
data_point_id_sets_path = path: ${deeplearn_default:batch_dir}/cross-fold/${deeplearn_default:batch_size}-keys.dat
vectorizer_manager_set = ${batch_stash:vectorizer_manager_set}
data_point_type = ${batch_stash:data_point_type}
batch_feature_mappings = ${batch_stash:batch_feature_mappings}
batch_type = ${batch_stash:batch_type}
decoded_attributes = ${batch_stash:decoded_attributes}
model_torch_config = ${batch_stash:model_torch_config}
chunk_size = ${batch_stash:chunk_size}
workers = ${batch_stash:workers}
batch_size = ${batch_stash:batch_size}

[cross_fold_dataset_stash]
class_name = ${dataset_stash:class_name}
delegate = instance: cross_fold_batch_stash
split_container = instance: cross_fold_batch_stash
sort_function = ${dataset_stash:sort_function}


## Executor
#
[executor]
# stash used in place of `dataset_stash`
cross_fold_dataset_stash = instance: cross_fold_dataset_stash
# the path the store the results in place of `result_path`
cross_fold_result_path = path: ${deeplearn_default:results_dir}/cross-fold-model


## Model
#
[model_settings]
# shuffle order of training batches
shuffle_training = True
