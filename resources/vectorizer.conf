# creates one hot vectors for each enumeration of the spaCy feature parsed in
# `doc_parser`.
[enum_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.EnumContainerFeatureVectorizer
feature_id = enum
# the feature ids to use at train/test time, which currently are all those
# defined in `zensols.deepnlp.vectorize.SpacyFeatureVectorizer`, and include
# 'ent', 'tag', and 'dep'
#
# train time tweakable
#decoded_feature_ids = eval: set('ent tag dep'.split())

# creates counts of for each enumeration of the SpaCy feature parsed in
# `doc_parser`.
[count_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.CountEnumContainerFeatureVectorizer
feature_id = count
# the feature ids to use at train/test time, which currently are all those
# defined in `zensols.deepnlp.vectorize.SpacyFeatureVectorizer`, and include
# 'ent', 'tag', and 'dep'
#
# train time tweakable
#decoded_feature_ids = eval: set('ent tag dep'.split())

# language statistic (no of tokens, etc)
[stats_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.StatisticsFeatureDocumentVectorizer
feature_id = stats

# head tree dependency features
[depth_token_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.DepthFeatureDocumentVectorizer
feature_id = dep
