# config
[filter_token_mapper]
class_name = zensols.nlp.FilterTokenMapper
remove_space = True

[token_normalizer]
class_name = zensols.nlp.MapTokenNormalizer
mapper_class_list = eval: 'filter_token_mapper'.split()

[langres]
class_name = zensols.nlp.LanguageResource
token_normalizer = instance: token_normalizer

[langres_default]
class_name = zensols.nlp.LanguageResource

[torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = False
data_type = eval({'import': ['torch']}): torch.float64


# document parsers
[skinny_doc_parser]
class_name = zensols.deepnlp.FeatureDocumentParser
langres = instance: langres
token_feature_ids = eval: set('is_space is_stop tag ent dep'.split())

[doc_parser_default]
class_name = zensols.deepnlp.FeatureDocumentParser
langres = instance: langres_default

[doc_parser]
class_name = zensols.deepnlp.FeatureDocumentParser
langres = instance: langres


# vectorizers
[enum_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.EnumContainerFeatureVectorizer
feature_id = enum

[count_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.CountEnumContainerFeatureVectorizer
feature_id = count
#decoded_feature_ids = eval: set('ent'.split())

[stats_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.StatisticsTokenContainerFeatureVectorizer
feature_id = stats

[dep_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.DepthTokenContainerFeatureVectorizer
feature_id = dep


# managers
[skinny_feature_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: ()
doc_parser = instance: skinny_doc_parser
token_length = 3

[skinnier_feature_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: ('count_feature_vectorizer',)
doc_parser = instance: skinny_doc_parser
token_feature_ids = ${skinny_doc_parser:token_feature_ids}
token_length = 3

[no_vectorizer_feature_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: ()
doc_parser = instance: doc_parser
token_length = 3

[single_vectorizer_feature_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: set('stats_feature_vectorizer enum_feature_vectorizer count_feature_vectorizer'.split())
doc_parser = instance: doc_parser
token_length = 25

[feature_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: set('stats_feature_vectorizer dep_feature_vectorizer enum_feature_vectorizer count_feature_vectorizer'.split())
doc_parser = instance: doc_parser
token_length = 30


[overlap_token_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.OverlappingTokenContainerFeatureVectorizer
feature_id = overlap_token

[mutual_token_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.MutualFeaturesContainerFeatureVectorizer
count_vectorizer_feature_id = count
feature_id = mutual_count

[overlap_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: set('count_feature_vectorizer overlap_token_feature_vectorizer mutual_token_feature_vectorizer'.split())
doc_parser = instance: doc_parser
token_length = 30
