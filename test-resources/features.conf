# config
[filter_token_mapper]
class_name = zensols.nlp.FilterTokenMapper
remove_space = True

[token_normalizer]
class_name = zensols.nlp.MapTokenNormalizer
mapper_class_list = eval: 'filter_token_mapper'.split()

[langres]
class_name = zensols.nlp.LanguageResource
token_normalizer = instance: token_normalizer

[langres_default]
class_name = zensols.nlp.LanguageResource

[torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = False
data_type = eval({'import': ['torch']}): torch.float64


# document parsers
[skinny_doc_parser]
class_name = zensols.deepnlp.FeatureDocumentParser
langres = instance: langres
token_feature_types = eval: set('is_space is_stop tag'.split())

[doc_parser_default]
class_name = zensols.deepnlp.FeatureDocumentParser
langres = instance: langres_default

[doc_parser]
class_name = zensols.deepnlp.FeatureDocumentParser
langres = instance: langres


# vectorizers
[skinny_feature_vectorizer]
class_name = zensols.deepnlp.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: ()
module_vectorizers = None
langres = instance: langres
doc_parser = instance: skinny_doc_parser
token_length = 3

[skinnier_feature_vectorizer]
class_name = zensols.deepnlp.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
module_vectorizers = None
configured_vectorizers = eval: ()
langres = instance: langres
doc_parser = instance: skinny_doc_parser
token_feature_types = ${skinny_doc_parser:token_feature_types}
token_length = 3

[no_vectorizer_feature_vectorizer]
class_name = zensols.deepnlp.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
module_vectorizers = eval: ()
configured_vectorizers = eval: ()
langres = instance: langres
doc_parser = instance: doc_parser
token_length = 3

[single_vectorizer_feature_vectorizer]
class_name = zensols.deepnlp.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
module_vectorizers = eval: set('stats ftvec count'.split())
configured_vectorizers = eval: ()
langres = instance: langres
doc_parser = instance: doc_parser
token_length = 25

[feature_vectorizer]
class_name = zensols.deepnlp.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
module_vectorizers = None
configured_vectorizers = eval: ()
langres = instance: langres
doc_parser = instance: doc_parser
token_length = 30
