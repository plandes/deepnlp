[appenv]
root_dir = .

[import]
references = list: appenv
sections = list: imp

[imp]
type = import
config_files = list:
  resource(zensols.util): resources/default.conf,
  resource(zensols.util): resources/escape.conf,
  resource(zensols.deeplearn): resources/default.conf,
  resource(zensols.deeplearn): resources/torch.conf,
  path: resources/default.conf,
  path: resources/spacy-vectorizer.yml

[filter_token_mapper]
class_name = zensols.nlp.FilterTokenMapper
remove_space = True

[token_normalizer]
class_name = zensols.nlp.MapTokenNormalizer
mapper_class_list = eval: 'filter_token_mapper'.split()

[torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = False
data_type = eval({'import': ['torch']}): torch.float64


[doc_parser]
class_name = zensols.nlp.sparser.SpacyFeatureDocumentParser
token_feature_ids = eval: set('ent dep norm'.split())
token_normalizer = instance: token_normalizer

[ent_dep_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.EnumContainerFeatureVectorizer
feature_id = enum
encode_transformed = False

[ent_dep_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.FeatureDocumentVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: 'ent_dep_feature_vectorizer'.split()
configured_spacy_vectorizers = instance: tuple:
  ner_spacy_feature_vectorizer,
  dep_spacy_feature_vectorizer,
  pos_spacy_feature_vectorizer
token_feature_ids = ${doc_parser:token_feature_ids}
doc_parser = instance: doc_parser
token_length = 30


[ent_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.EnumContainerFeatureVectorizer
feature_id = enum
encode_transformed = False
decoded_feature_ids = eval: set(['ent'])

[ent_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.FeatureDocumentVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: 'ent_feature_vectorizer'.split()
configured_spacy_vectorizers = instance: tuple:
  ner_spacy_feature_vectorizer,
  dep_spacy_feature_vectorizer,
  pos_spacy_feature_vectorizer
token_feature_ids = ${doc_parser:token_feature_ids}
doc_parser = instance: doc_parser
token_length = 30

[ent_vectorizer_manager_nolen]
class_name = zensols.deepnlp.vectorize.FeatureDocumentVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: 'ent_feature_vectorizer'.split()
configured_spacy_vectorizers = instance: tuple:
  ner_spacy_feature_vectorizer,
  dep_spacy_feature_vectorizer,
  pos_spacy_feature_vectorizer
token_feature_ids = ${doc_parser:token_feature_ids}
doc_parser = instance: doc_parser
token_length = -1
