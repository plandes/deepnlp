# config
[filter_token_mapper]
class_name = zensols.nlp.FilterTokenMapper
remove_space = True

[token_normalizer]
class_name = zensols.nlp.MapTokenNormalizer
mapper_class_list = eval: 'filter_token_mapper'.split()

[torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = False
data_type = eval({'import': ['torch']}): torch.float64


# bert
[transformer_bert_resource]
class_name = zensols.deepnlp.transformer.TransformerResource
torch_config = instance: torch_config
model_id = bert-base-cased
cased = True
cache = False
trainable = False
# from_pretrain extra arguments; speeds things up, but comment out for the
# first pretrained download
args = dict: {'local_files_only': True}

[transformer_bert_tokenizer]
class_name = zensols.deepnlp.transformer.TransformerDocumentTokenizer
resource = instance: transformer_bert_resource
word_piece_token_length = 0

[transformer_bert_embedding]
class_name = zensols.deepnlp.transformer.TransformerEmbedding
tokenizer = instance: transformer_bert_tokenizer
output = last_hidden_state

[transformer_bert_feature_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerEmbeddingFeatureVectorizer
feature_id = transformer_bert
fold_method = concat_tokens
embed_model = instance: transformer_bert_embedding
encode_transformed = False

[transformer_bert_embedding_layer]
class_name = zensols.deepnlp.transformer.TransformerEmbeddingLayer
embed_model = instance: transformer_bert_embedding
feature_vectorizer_manager = instance: language_vectorizer_manager


# roberta
[transformer_roberta_resource]
class_name = zensols.deepnlp.transformer.TransformerResource
torch_config = instance: torch_config
model_id = roberta-base
cased = True
cache = False
trainable = False
args = dict: {'local_files_only': True}

[transformer_roberta_tokenizer]
class_name = zensols.deepnlp.transformer.TransformerDocumentTokenizer
resource = instance: transformer_roberta_resource
word_piece_token_length = 0

[transformer_roberta_embedding]
class_name = zensols.deepnlp.transformer.TransformerEmbedding
tokenizer = instance: transformer_roberta_tokenizer
output = last_hidden_state

[transformer_roberta_feature_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerEmbeddingFeatureVectorizer
feature_id = transformer_roberta
fold_method = concat_tokens
embed_model = instance: transformer_roberta_embedding
encode_transformed = False

[transformer_roberta_embedding_layer]
class_name = zensols.deepnlp.transformer.TransformerEmbeddingLayer
embed_model = instance: transformer_roberta_embedding
feature_vectorizer_manager = instance: language_vectorizer_manager


# distilbert
[transformer_distilbert_resource]
class_name = zensols.deepnlp.transformer.TransformerResource
torch_config = instance: torch_config
model_id = distilbert-base-cased
cased = True
cache = False
trainable = False
args = dict: {'local_files_only': True}

[transformer_distilbert_tokenizer]
class_name = zensols.deepnlp.transformer.TransformerDocumentTokenizer
resource = instance: transformer_distilbert_resource
word_piece_token_length = 0

[transformer_distilbert_embedding]
class_name = zensols.deepnlp.transformer.TransformerEmbedding
tokenizer = instance: transformer_distilbert_tokenizer
output = last_hidden_state

[transformer_distilbert_feature_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerEmbeddingFeatureVectorizer
feature_id = transformer_distilbert
fold_method = concat_tokens
embed_model = instance: transformer_distilbert_embedding
encode_transformed = False

[transformer_distilbert_embedding_layer]
class_name = zensols.deepnlp.transformer.TransformerEmbeddingLayer
embed_model = instance: transformer_distilbert_embedding
feature_vectorizer_manager = instance: language_vectorizer_manager


# document parsers
[doc_parser]
class_name = zensols.nlp.SpacyFeatureDocumentParser
token_normalizer = instance: token_normalizer

# managers
[feature_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.FeatureDocumentVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = list:
    transformer_bert_feature_vectorizer,
    transformer_roberta_feature_vectorizer,
    transformer_distilbert_feature_vectorizer
doc_parser = instance: doc_parser
token_length = 0


## labler
# vectorizers
[ent_label_1_vectorizer]
class_name = zensols.deeplearn.vectorize.NominalEncodedEncodableFeatureVectorizer
feature_id = entlabel1
manager = instance: lab_vectorizer_manager
categories = eval({'import': ['zensols.nlp as nlp']}):
  [nlp.FeatureToken.NONE, 'GPE', 'DATE', 'NORP', 'PERSON']

[ent_label_trans_concat_tokens_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerNominalFeatureVectorizer
feature_id = entlabel_trans
manager = instance: lab_vectorizer_manager
delegate_feature_id = entlabel1
fold_method = concat_tokens
embed_model = instance: transformer_bert_embedding
encode_transformed = False
label_all_tokens = True

[ent_label_trans_sentence_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerNominalFeatureVectorizer
feature_id = entlabel_trans
manager = instance: lab_vectorizer_manager
delegate_feature_id = entlabel1
fold_method = sentence
embed_model = instance: transformer_bert_embedding
encode_transformed = False
label_all_tokens = True

[ent_label_trans_separate_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerNominalFeatureVectorizer
feature_id = entlabel_trans
manager = instance: lab_vectorizer_manager
delegate_feature_id = entlabel1
fold_method = separate
embed_model = instance: transformer_bert_embedding
encode_transformed = False
label_all_tokens = True

[ent_mask_trans_concat_tokens_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerMaskFeatureVectorizer
feature_id = mask
manager = instance: lab_vectorizer_manager
fold_method = concat_tokens
embed_model = instance: transformer_bert_embedding
encode_transformed = False

[ent_mask_trans_sentence_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerMaskFeatureVectorizer
feature_id = mask
manager = instance: lab_vectorizer_manager
fold_method = sentence
embed_model = instance: transformer_bert_embedding
encode_transformed = False

[ent_mask_trans_separate_vectorizer]
class_name = zensols.deepnlp.transformer.TransformerMaskFeatureVectorizer
feature_id = mask
manager = instance: lab_vectorizer_manager
fold_method = separate
embed_model = instance: transformer_bert_embedding
encode_transformed = False

[lab_doc_parser]
class_name = zensols.nlp.SpacyFeatureDocumentParser
doc_class = class: zensols.nlp.TokenAnnotatedFeatureDocuemnt

[lab_vectorizer_manager]
class_name = zensols.deepnlp.vectorize.FeatureDocumentVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = list:
    transformer_bert_feature_vectorizer,
    ent_label_1_vectorizer
doc_parser = instance: lab_doc_parser
token_length = 0
