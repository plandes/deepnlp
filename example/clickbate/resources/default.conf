## application defaults

# override for creating instances of a class that have an attribute for the
# label of the text classification
[doc_parser]
doc_class = class: zensols.deepnlp.batch.LabeledFeatureDocument

# declare a NLP pipeline component to remove sentence boundaries (effectively
# skipping the sentence chunking step) since our corpus has the complete
# headline "sentence" newline delimited; otherwise this will chunk sentences
# from misleading capitalization
[remove_sent_boundaries_component]
class_name = zensols.nlp.Component
pipe_name = remove_sent_boundaries
modules = list: cb.pipe
pipe_add_kwargs = dict: {'first': True}

# override the language resource to use the component
[langres]
components = instance: list: remove_sent_boundaries_component

# classes for the clickbate corpus
[class]
labels = y n

# override to provide the labels to vectorize
[label_vectorizer]
categories = eval: '${class:labels}'.split()

# let our decoder (last fully connected feed forward network) the output
# dimension as the number of labels to classify
[linear_settings]
out_features = eval: len('${class:labels}'.split())

# declare (override) the ModelFacade to use for the application
[facade]
class_name = zensols.deepnlp.classify.ClassifywModelFacade

# tell the model to use a feature prediction mapper for our classification
[model_settings]
prediction_mapper_name = feature_prediction_mapper
