## Application defaults
#
## vectorization
#
# classes for the clickbate corpus
[class]
labels = n p

# override to provide the labels to vectorize
[classify_label_vectorizer]
categories = eval: '${class:labels}'.split()

# maintains a collection of all vectorizers for the framework
[vectorizer_manager_set]
names = list: language_feature_manager, classify_label_vectorizer_manager


## batch
#
[batch_stash]
data_point_type = eval({'import': ['mr']}): mr.MovieReviewDataPoint
# map feature attributes (sections) to feature IDs to connect features to vectorizers
batch_feature_mappings = dataclass(zensols.deeplearn.batch.ConfigBatchFeatureMapping): mr_batch_mappings
decoded_attributes = set: label, ${mr_default:lang_features} ${mr_default:embedding}


## model
#
# let our decoder (last fully connected feed forward network) the output
# dimension as the number of labels to classify
[linear_settings]
out_features = eval: len('${class:labels}'.split())

# declare (override) the ModelFacade to use for the application
[facade]
class_name = zensols.deepnlp.classify.ClassifyModelFacade

# tell the model to use a feature prediction mapper for our classification
[model_settings]
prediction_mapper_name = classify_feature_prediction_mapper

# set the dropout for the classification network, which propogates down to the
# sub/owned networks
[classify_net_settings]
dropout = 0.2

# tell the model automation API which model to use
[executor]
net_settings = instance: classify_net_settings

[deeplearn_default]
model_name = ${mr_default:embedding}


## Prediction mapper
#
# create data points from the client
[classify_feature_prediction_mapper]
pred_attribute = polarity
softmax_logit_attribute = confidence
