## Project specific corpus

# configuration needed to create the corpus and a Pandas dataframe used by the
# framework (zensols.dep
[dataset_factory]
class_name = movie.DatasetFactory
# path to the stanford corpus
stanford_path = path: ${default:stanford_dir}
# path to polarity labels
rt_pol_path = path: ${default:cornell_dir}
# path to input dataset CSV corpus files
dataset_path = path: ${default:corpus_dir}/dataset
# total number of tokens for each sentence key
tok_len = 10
# characters and strings to remove from the sentence key
throw_out = set("`` '' \" ` ' ( ) [ ] -lrb- -rrb- \/ / --".split())
# sentence string replacement
repls = eval: [['cannot', 'can not'], [" n't", "n't"]]
# column used for splits
split_col = split

# a stash of rows from a Pandas dataset for each movie review
[dataframe_stash]
class_name = movie.ReviewRowStash
dataset_factory = instance: dataset_factory
# location of pickled cache data to avoid recreating the dataframe each time
dataframe_path = path: ${default:data_dir}/df.dat
split_col = ${dataset_factory:split_col}
key_path = path: ${default:data_dir}/keys.dat

# directory to store the parsed (POS tags, NER tagged entities, etc.), which
# are later used to create features
[feature_dir_stash]
class_name = zensols.persist.DirectoryStash
path = path: ${default:data_dir}/parse

# the stash of extracted natural language features derived from parsing; this
# is generated by spawning child processes to invoke SpaCy parsing on each
# utterance in the review
[feature_factory_stash]
class_name = movie.ReviewFeatureStash
delegate = instance: feature_dir_stash
factory = instance: dataframe_stash
vec_manager = instance: language_feature_manager
chunk_size = 0
workers = 0
document_limit = eval: sys.maxsize

# a stash that splits along dataset type (i.e. train, validation, test)
[feature_stash]
class_name = zensols.dataset.DatasetSplitStash
delegate = instance: feature_factory_stash
split_container = instance: dataframe_stash

# create data points from the client
[feature_prediction_mapper]
class_name = movie.ReviewPredictionMapper
vec_manager = instance: language_feature_manager
label_feature_id = label_vectorizer_manager.rvlabel
