[cli]
class_name = zensols.cli.ActionCliManager
apps = list: pkg_cli, log_cli, config_cli, list_actions_cli, export_env_cli,
     fac_info_app, fac_model_app, app
cleanups = list: pkg_cli, config_cli, list_actions_cli, export_env_cli,
	 fac_info_app, fac_model_app, app_decorator, app, cli, package, resources

[log_cli]
class_name = zensols.cli.LogConfigurator
log_name = ${package:name}
#format = %%(asctime)-15s [%%(name)s] %%(message)s
#format = [%%(levelname)s] %%(name)s: %%(message)s
format = %%(name)s: %%(message)s
#loggers = dict: {'zensols.deepnlp.transformer': 'debug'}
#loggers = dict: {'zensols.deepnlp.vectorize.layer': 'debug'}
#loggers = dict: {'zensols.deepnlp.layer.embed': 'debug', 'zensols.deepnlp.vectorize.vectorizers': 'debug'}
# loggers = dict: {
#     'zensols.deeplearn.batch.domain': 'debug',
#     'zensols.deeplearn.vectorize.manager': 'debug',
#     'zensols.deepnlp.vectorize.layer': 'debug',
#     'zensols.deepnlp.transformer': 'debug',
#     }

[multiprocess_log_config]
section = log_cli

[pkg_cli]
class_name = zensols.cli.PackageInfoImporter

[config_cli]
class_name = zensols.cli.ConfigurationImporter
override = True

[list_actions_cli]
class_name = zensols.cli.ListActions

[resources]
path = ${env:root_dir}/resources

[import]
references = resources
sections = imp_conf

[imp_conf]
type = ini
files = list:
    ${resources:path}/main.conf,
    ${resources:path}/corpus.conf,
    ${resources:path}/lang.conf,
    ${resources:path}/embedding.conf,
    ${resources:path}/vectorizer.conf,
    ${resources:path}/batch.conf,
    ${resources:path}/model.conf

[export_env_cli]
class_name = zensols.cli.ExportEnvironment
section = export_vars

[facade]
class_name = movie.ReviewModelFacade

[fac_info_app]
class_name = zensols.deeplearn.cli.FacadeInfoApplication
#config_factory_args = dict: {'reload_pattern': '^zensols.deepnlp.transformer.*'}
config_factory_args = dict: {'reload_pattern': '^zensols.deeplearn.model.*'}

[fac_model_app]
class_name = zensols.deeplearn.cli.FacadeModelApplication

[app]
class_name = zensols.deeplearn.cli.FacadeApplication
#config_factory_args = dict: {'reload_pattern': '^zensols.deepnlp.transformer.*'}
config_factory_args = dict: {'reload_pattern': '^zensols.deeplearn.model.*'}

[app_decorator]
class_name = zensols.cli.ActionCli
option_includes = eval: set()
