[cli]
class_name = zensols.cli.ActionCliManager
apps = list: pkg_cli, log_cli, config_cli, list_actions_cli, export_env_cli,
     fac_info_app, fac_model_app, app
cleanups = list: pkg_cli, config_cli, list_actions_cli, export_env_cli,
	 fac_info_app, fac_model_app, app_decorator, app, cli, resources

[log_cli]
class_name = zensols.cli.LogConfigurator
log_name = ${package:name}
format = %%(asctime)-15s [%%(levelname)s] %%(name)s: %%(message)s

[multiprocess_log_config]
section = log_cli

[pkg_cli]
class_name = zensols.cli.PackageInfoImporter

[config_cli]
class_name = zensols.cli.ConfigurationImporter
type = import
section = config_import

[list_actions_cli]
class_name = zensols.cli.ListActions

[resources]
path = ${env:root_dir}/resources

[config_import]
references = list: resources, package
sections = list: imp_conf

[imp_conf]
type = importini
config_files = list:
    ^{config_path},
    resource(zensols.deepnlp): resources/glove.conf,
    resource(zensols.deepnlp): resources/word2vec.conf,
    ${resources:path}/main.conf,
    ${resources:path}/corpus.conf,
    ${resources:path}/lang.conf,
    ${resources:path}/transformer.conf,
    ${resources:path}/vectorizer.conf,
    ${resources:path}/batch.conf,
    ${resources:path}/model.conf,
    ^{config_path}

#    resource(zensols.deepnlp): resources/transformer.conf,

[export_env_cli]
class_name = zensols.cli.ExportEnvironment
section = export_vars

[facade]
class_name = movie.ReviewModelFacade

[fac_info_app]
class_name = zensols.deeplearn.cli.FacadeInfoApplication
config_factory_args = dict: {'reload_pattern': '^(zensols.deepnlp.embed|zensols.deepnlp.model.facade).*'}

[fac_model_app]
class_name = zensols.deeplearn.cli.FacadeModelApplication

[app]
class_name = movie.ReviewApplication
config_factory_args = dict: {'reload_pattern': '^(zensols.deepnlp.embed|zensols.deepnlp.model.facade).*'}

[app_decorator]
class_name = zensols.cli.ActionCli
option_includes = eval: set()
