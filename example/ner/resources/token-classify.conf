## Vectorization
#
[tok_label_1_vectorizer]
class_name = zensols.deeplearn.vectorize.NominalEncodedEncodableFeatureVectorizer
feature_id = tclabel1
categories = eval: (${category_settings:ent})

[tok_label_vectorizer]
class_name = zensols.deeplearn.vectorize.AggregateEncodableFeatureVectorizer
feature_id = tclabel
size = -1
delegate_feature_id = tclabel1

[tok_mask_vectorizer]
class_name = zensols.deeplearn.vectorize.MaskFeatureVectorizer
feature_id = tmask
size = -1

# the vectorizer for labels is not language specific and lives in the
# zensols.deeplearn.vectorize package, so it needs it's own instance
[ner_label_vectorizer_manager]
class_name = zensols.deeplearn.vectorize.FeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = list:
    tok_label_1_vectorizer,
    tok_label_vectorizer,
    tok_mask_vectorizer


## Model
#
[model_settings]
# used a scored batch iterator to handle terminating CRF states
batch_iteration_class_name = zensols.deeplearn.model.SequenceBatchIterator
# leave CRF decoded output alone
reduce_outcomes = none
# an optional factory used to create predictions
prediction_mapper_name = feature_prediction_mapper

[recurrent_crf_net_settings]
mask_attribute = tok_mask


## Prediction
#
# create data points from the client
[feature_prediction_mapper]
class_name = ner.NERPredictionMapper
vec_manager = instance: language_feature_manager
label_feature_id = label_vectorizer_manager.entlabel1

# maps BIO labels to NER mentions
[anon_mapper]
class_name = zensols.deepnlp.model.BioSequenceAnnotationMapper
