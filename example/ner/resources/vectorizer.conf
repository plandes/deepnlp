## vectorizers

[category_settings]
tag = 'NNP', 'VBZ', 'PRP', 'VBD', 'NN', 'NNS', '.', 'DT', 'JJ', ',', 'VBG', 'CD', 'CC', 'IN', 'TO', 'JJS', ':', '(', ')', 'VB', '"', 'VBP', 'POS', 'VBN', 'RB', 'PRP$$', 'MD', 'WP', 'NNPS', 'RP', 'FW', 'JJR', 'WDT', '$$', 'SYM', 'WRB', 'RBR', 'UH', 'EX', 'RBS', 'PDT', "''", 'NN|SYM', 'WP$$', 'LS'
syn = 'B-NP', 'I-NP', 'B-VP', 'O', 'B-PP', 'I-VP', 'B-ADVP', 'B-SBAR', 'B-ADJP', 'B-PRT', 'I-PP', 'B-INTJ', 'B-CONJP', 'I-CONJP', 'I-ADJP', 'B-LST', 'I-ADVP', 'I-SBAR', 'I-LST', 'I-INTJ', 'I-PRT'
ent = 'B-LOC', 'O', 'B-PER', 'I-LOC', 'I-PER', 'B-ORG', 'I-ORG', 'B-MISC', 'I-MISC'

# vectorize the labels from text to PyTorch tensors
[tag_label_1_vectorizer]
class_name = zensols.deeplearn.vectorize.OneHotEncodedEncodableFeatureVectorizer
feature_id = taglabel1
categories = eval: (${category_settings:tag})

[tag_label_vectorizer]
class_name = zensols.deeplearn.vectorize.AggregateEncodableFeatureVectorizer
feature_id = taglabel
size = ${language_defaults:token_length}
delegate_feature_id = taglabel1

[syn_label_1_vectorizer]
class_name = zensols.deeplearn.vectorize.OneHotEncodedEncodableFeatureVectorizer
feature_id = synlabel1
categories = eval: (${category_settings:syn})

[syn_label_vectorizer]
class_name = zensols.deeplearn.vectorize.AggregateEncodableFeatureVectorizer
feature_id = synlabel
size = ${language_defaults:token_length}
delegate_feature_id = synlabel1

[ent_label_1_vectorizer]
class_name = zensols.deeplearn.vectorize.NominalEncodedEncodableFeatureVectorizer
feature_id = entlabel1
categories = eval: (${category_settings:ent})
data_type = int64

[ent_label_vectorizer]
class_name = zensols.deeplearn.vectorize.AggregateEncodableFeatureVectorizer
feature_id = entlabel
size = ${language_defaults:token_length}
delegate_feature_id = entlabel1

[mask_vectorizer]
class_name = zensols.deeplearn.vectorize.MaskFeatureDocumentVectorizer
feature_id = mask
size = ${language_defaults:token_length}
data_type = bool

# the vectorizer for labels is not language specific and lives in the
# zensols.deeplearn.vectorize package, so it needs it's own instance
[label_vectorizer_manager]
class_name = zensols.deeplearn.vectorize.FeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: (
    'tag_label_1_vectorizer tag_label_vectorizer ' +
    'syn_label_1_vectorizer syn_label_vectorizer ' +
    'ent_label_1_vectorizer ent_label_vectorizer ' +
    'mask_vectorizer').split()

# maintains a collection of all vectorizers for the framework
[sent_vectorizer_manager_set]
class_name = zensols.deeplearn.vectorize.FeatureVectorizerManagerSet
names = eval: 'language_feature_manager label_vectorizer_manager'.split()
