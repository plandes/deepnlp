# command line applications and sections to delete after load
[cli]
apps = list: ${cli_config_default:apps}, ${cli_deeplearn_default:apps}, ${cli_deepnlp_default:apps}, deepnlp_fac_seq_classify_app, cleaner_cli, app
cleanups = list: ${cli_config_default:cleanups}, ${cli_deeplearn_default:cleanups}, ${cli_deepnlp_default:cleanups}, deepnlp_fac_seq_classify_app, app
#cleaner_cli, 
cleanup_removes = set: log_cli

# set the default embeddding
[override_cli_decorator]
option_overrides = dict: {'override': {'default': 'ner_default.name=glove_50'}}

[config_cli_decorator]
option_overrides = dict: {'config_path': {'default': 'models/wordvec.yml'}}

# set the default clean level to remove everything but the downloaded corpus
[cleaner_cli_decorator]
option_overrides = dict: {'clean_level': {'default': 1}}

# configuration files are optional
# [config_cli]
# expect = False

# import command line apps
[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf,
    resource(zensols.deeplearn): resources/cli.conf,
    resource(zensols.deepnlp): resources/cli.conf,
    resource(zensols.deepnlp): resources/cleaner.conf

# import the `imp_conf` while leaving default and escape sections available to
# the remainder of the config loading process
[config_import]
references = list: default, conf_esc
sections = list: app_imp_conf

# first load overrides to enable setting defaults, then load the (usually model
# specific) configuration defining anything used in later configuration
[app_imp_conf]
type_map = dict: {'yml': 'condyaml', 'conf': 'importini'}
config_files = list:
    resource(zensols.deeplearn): resources/default.conf,
    resource(zensols.deepnlp): resources/default.conf,
    ^{override},
    ^{config_path},
    resource(ner): resources/default.conf,
    resource(zensols.deeplearn): resources/obj.conf,
    resource(zensols.deeplearn): resources/observer.conf,
    resource(zensols.nlp): resources/obj.conf,
    resource(zensols.deepnlp): resources/obj.conf,
    resource(zensols.deepnlp): resources/embed-crf.conf,
    resource(zensols.deepnlp): resources/token-classify.yml,
    resource(ner): resources/obj.yml,
    ^{config_path}

[app]
class_name = ner.App
stats_calc = instance: feature_stats
