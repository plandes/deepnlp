## Embedding

# glove embeddding model (not layer)
[glove_50_embedding]
class_name = zensols.deepnlp.embed.GloveWordEmbedModel
path = path: ${default:corpus_dir}/glove
desc = 6B
dimension = 50
lowercase = True

# a vectorizer that turns tokens (TokensContainer) in to indexes given to the
# embedding layer
[glove_50_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.WordVectorSentenceFeatureVectorizer
# the feature id is used to connect instance data with the vectorizer used to
# generate the feature at run time
feature_id = wvglove50
embed_model = instance: glove_50_embedding
# treat the document as a stream of tokens generating a flat set of indexes
as_document = True
# decode in to the embedding matrix
#decode_embedding = True

# a torch.nn.Module implementation that uses the an embedding model
[glove_50_embedding_layer]
class_name = zensols.deepnlp.vectorize.WordVectorEmbeddingLayer
embed_model = instance: glove_50_embedding
feature_vectorizer = instance: language_feature_manager

# glove 300 dim
[glove_300_embedding]
class_name = zensols.deepnlp.embed.GloveWordEmbedModel
path = path: ${default:corpus_dir}/glove
desc = 6B
dimension = 300
lowercase = True

[glove_300_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.WordVectorSentenceFeatureVectorizer
feature_id = wvglove300
embed_model = instance: glove_300_embedding
as_document = True

[glove_300_embedding_layer]
class_name = zensols.deepnlp.vectorize.WordVectorEmbeddingLayer
embed_model = instance: glove_300_embedding
feature_vectorizer = instance: language_feature_manager

# word2vec
[word2vec_300_embedding]
class_name = zensols.deepnlp.embed.Word2VecModel
path = path: ${default:corpus_dir}/word2vec/GoogleNews-vectors-negative300.bin
dimension = 300

[word2vec_300_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.WordVectorSentenceFeatureVectorizer
feature_id = w2v300
embed_model = instance: word2vec_300_embedding
as_document = True
decode_embedding = True

[word2vec_300_embedding_layer]
class_name = zensols.deepnlp.vectorize.WordVectorEmbeddingLayer
embed_model = instance: word2vec_300_embedding
feature_vectorizer = instance: language_feature_manager

# transformer
[transformer_embedding]
class_name = zensols.deepnlp.transformer.TransformerEmbeddingModel
torch_config = instance: gpu_torch_config
#model_name = distilbert
#model_name = bert
model_name = roberta
# the word piece length is always the same or greater in count than linguistic
# tokens because the word piece algorithm tokenizes on characters; however, in
# this case, we set it to the shared value `token_length` as the subsequent
# layer expects this as a dimension
word_piece_token_length = ${language_defaults:token_length}
#word_piece_token_length = 70
cased = True
# cache the model at the global level since there is only one huggingface
# transformer model we're using; also without it, subprocess CPU to CPU copy freezes:
# https://github.com/huggingface/transformers/issues/8649
cache = True
# from_pretrain extra arguments
pretrain_args = dict: {'local_files_only': True}
# whether or not the embeddings are trainable (not frozen)
trainable = True

[transformer_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.TransformerSentenceFeatureVectorizer
feature_id = transformer
embed_model = instance: transformer_embedding
as_document = True
encode_transformed = False

[transformer_embedding_layer]
class_name = zensols.deepnlp.vectorize.TransformerEmbeddingLayer
embed_model = instance: transformer_embedding
feature_vectorizer = instance: language_feature_manager
