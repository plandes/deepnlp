## language and resources configuration

[language_defaults]
# sentence token length; corpus is chunked as sentences to begin with
token_length = 100
embedding = bert_embedding

# language resource, which loads the SpacCy model and token normalizers
[filter_token_mapper]
class_name = zensols.nlp.FilterTokenMapper
remove_space = True

[token_normalizer]
class_name = zensols.nlp.MapTokenNormalizer
mapper_class_list = list: filter_token_mapper

[langres]
class_name = zensols.nlp.LanguageResource
token_normalizer = instance: token_normalizer

# creates features from documents by invoking by using SpaCy to parse the text
[doc_parser]
class_name = zensols.deepnlp.FeatureDocumentParser
langres = instance: langres
# indicate which features to keep after the parsing; if this is not given, all
# features are kept and persisted
#
# 'norm' is good for debuging, 'dep', 'children' and the rest are needed for
# dep head tree features
#token_feature_ids = eval: set('norm ent dep tag children i dep_ is_punctuation'.split())
token_feature_ids = eval: set('norm tag'.split())

# a language specific vectorizer manager that uses the FeatureDocumentParser
# defined in `doc_parser` to create word embeddings using the vectorizer
# defined in `glove_50_feature_vectorizer` and natural language features
[language_feature_manager]
class_name = zensols.deepnlp.vectorize.TokenContainerFeatureVectorizerManager
torch_config = instance: torch_config
# word embedding vectorizers can not be class level since each instance is
# configured
configured_vectorizers = list: bert_feature_vectorizer
# used for parsing `FeatureDocument` instances
doc_parser = instance: doc_parser
# the number of tokens in the document to use
# token length is not one to one with parsed tokens when using BERT, 70 works well
token_length = ${language_defaults:token_length}
# tokens to use
token_feature_ids = ${doc_parser:token_feature_ids}



## Embedding

# bert
[bert_embedding]
class_name = zensols.deepnlp.bert.BertEmbeddingModel
torch_config = instance: torch_config
#model_name = distilbert
model_name = bert
#model_name = roberta
# max token length (translates as a token to a word piece token grouping)
word_piece_length = ${language_defaults:token_length}
cased = True
# cache the model at the global level since there is only one huggingface
# transformer model we're using; also without it, subprocess CPU to CPU copy freezes:
# https://github.com/huggingface/transformers/issues/8649
cache = True
# from_pretrain extra arguments
#pretrain_args = dict: {'local_files_only': True}

[bert_feature_vectorizer]
class_name = zensols.deepnlp.vectorize.BertSentenceFeatureVectorizer
feature_id = bert
embed_model = instance: bert_embedding
as_document = True

[bert_embedding_layer]
class_name = zensols.deepnlp.vectorize.BertEmbeddingLayer
embed_model = instance: bert_embedding
feature_vectorizer = instance: language_feature_manager
